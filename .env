# Environment

# Get the current dir name
DIR=$(dirname "${BASH_SOURCE[0]}")
PROJECT_ID=$(basename $DIR)

# Detect project switch
if [[ "$_AUTOENV_ACTIVE" != "$PROJECT_ID" ]]; then

    # Only automate if sure were on a development device
    if [[ -n "$DEVELOPMENT_DEVICE" ]]; then

        # Detect virtualenv state
        if [[ -f "$DIR/requirements.txt" ]]; then
            if [[ ! -d "$DIR/venv" ]]; then

                # Activate and install the virtual environment
                echo "No virtualenv found, creating ..."
                virtualenv $DIR/venv

                echo "Activating virtualenv ..."
                source $DIR/venv/bin/activate

                echo "Installing dependencies ..."
                pip install pip-tools
                pip-sync

            else

                # Just activate the existing virtual environment
                echo "Activating virtualenv ..."
                source $DIR/venv/bin/activate

            fi
        fi

        # Detect ruby state
        if [[ -f "$DIR/Gemfile"  ]]; then
            if [[ ! -d "$DIR/.bundle" ]]; then
                echo "No ruby environment found"
                bundle install --path $DIR/.bundle/vendor --binstubs .bundle/bin
            fi

            # Activate ruby
            export PATH=$DIR/.bundle/bin:$PATH
        fi

        # Detect node state
        if [[ -f "$DIR/package.json" ]]; then
            if [[ ! -d "$DIR/node_modules" ]]; then
                echo "No node enviroment found, installing"
                npm install
            fi

            # Activate local node
            export PATH=$(npm bin):$PATH
        fi

        # Flag
        export _AUTOENV_ACTIVE=$PROJECT_ID

    fi

fi
